
// RTL of Half adder
module ha ( A , B , S , Carry );
input A , B ;
output S , Carry ;

assign S = A ^ B ;
assign Carry = A & B ;

endmodule // ha

// RTL of Full adder
module fa ( A , B , Cin , S , Carry ) ;
input A , B , Cin ;
output S , Carry ;

wire w1,w2,w3 ;

ha dut1 ( .A(A) , .B(B) , .S(w1) , .Carry(w2) ) ;
ha dut2 ( .A(w1) , .B(Cin) , .S(S) , .Carry(w3) ) ;

assign w2 or w3 = Carry ;

endmodule  // fa

// Test Bench of fa
module fa_tb ();
reg A , B , Cin ;
wire S , Carry ;

integer i;
fa dut ( .A(A) , .B(B) , .Cin(Cin) , .S(S) , .Carry(Carry) ) ;

initial
begin
A=1'b0;
B=1'b0;
Cin=1'b0;
end

initial
begin
for (i=0; i<4; i++)
begin
{A , B , Cin} = i;
#10;
end
end

initial
$monitor ("A=%b , B=%b , Cin=%b , S=%b , Carry=%b ", A , B , Cin , S , Carry ) ;

initial
#1000 $finish ;

endmodule //fa_tb
