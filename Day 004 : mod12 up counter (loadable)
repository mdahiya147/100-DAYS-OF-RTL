// RTL mod12 updpwn counter 
module mod12 ( clk , rst , load , din , dout ) ;
input clk , rst , load ;
input [3:0] din ;
output reg [3:0] dout ;

always @ (posedge clk)
begin
  if (rst)
  begin
  dout <= 4'b0000 ;
  end
  else 
  if ( din >= 4'b1011 )
  begin
  dout <= 4'b0000 ;
  end
  else
  if (load)
  begin
  dout <= din ;
  end
  else
  begin
  dout <= dout + 1 ;
  end
end
endmodule // mod12

//TestBench
module mod12_tb();
reg clk , rst , load ;
reg [3:0] din ;
wire [3:0] dout ;

parameter T = 3.90 ;

mod12 dut ( .clk(clk) , .rst(rst) , .load(load) , .din(din) , .dout(dout) ) ;

initial
begin
#(T/2)
clk = 1'b0 ;
forever 
#(T/2)
clk = ~clk ;
end

task intialize();
begin
rst =1;
clk =0;
load = 0;
din = 0;
end
endtask
	 
task reset_input();
begin
@(negedge clk)
rst = 1'b1;
@(negedge clk)
rst = 1'b0;
end
endtask
	
task counter_input (input [3:0]i);
begin
@(negedge clk)
load = 1'b1;
din = i;
@(negedge clk)
load = 1'b0;
end
endtask
	
// calling the tasks
initial
begin	
intialize;
reset_input;
counter_input (4'b1000);
end
	
initial
begin
$monitor ("clk=%b, rst= %b, load= %b, din= %b, dout= %b", clk, rst, load, din, dout);
#500 $finish;
end
	
endmodule //mod_12_tb
